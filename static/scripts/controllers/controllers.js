// Generated by CoffeeScript 1.6.3
(function() {
  var controllers;

  controllers = angular.module("engineControllers", ['ngAnimate']);

  controllers.controller("CreateProjectFormController", function($scope, $http, $location) {
    return $scope.create_project = function() {
      var params;
      params = {
        title: $scope.newProjectData.title,
        description: $scope.newProjectData.description,
        user_name: $scope.user.userName
      };
      return $http({
        method: 'POST',
        url: 'http://localhost:8888/api/project',
        data: params,
        transformRequest: objectToQueryString,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }).success(function(data, status) {
        return $location.path($scope.user.userName + '/' + data.formatted_title);
      }).error(function(data, status) {
        return $scope.titleTaken = true;
      });
    };
  });

  controllers.controller("ChooseDataSourcesCtrl", function($scope) {});

  controllers.controller("ProjectListCtrl", function($scope, $http, $location, AllProjectsService) {
    $scope.newProjectData = {};
    $scope.newProject = false;
    $scope.user = {
      userName: 'demo-user',
      displayName: 'Demo User'
    };
    AllProjectsService.promise($scope.user.userName, function(projects) {
      return $scope.projects = projects;
    });
    $scope.select_project = function(id) {
      return console.log(id);
    };
    return $scope.new_project_toggle = function() {
      return $scope.newProject = !$scope.newProject;
    };
  });

  controllers.controller("PaneToggleCtrl", function($scope) {
    $scope.leftClosed = false;
    $scope.rightClosed = false;
    $scope.toggleLeft = function() {
      return $scope.leftClosed = !$scope.leftClosed;
    };
    return $scope.toggleRight = function() {
      return $scope.rightClosed = !$scope.rightClosed;
    };
  });

  controllers.controller("TabsCtrl", function($scope, $routeParams) {
    $scope.uID = $routeParams.uID;
    $scope.pID = $routeParams.pID;
    $scope.tabs = [
      {
        link: "data",
        label: "1. Manage Datasets"
      }, {
        link: "ontology",
        label: "2. Edit Ontology"
      }, {
        link: "visualize",
        label: "3. Select Visualizations"
      }, {
        link: "assemble",
        label: "4. Assemble Engine"
      }
    ];
    $scope.selectedTab = $scope.tabs[0];
    $scope.setSelectedTab = function(tab) {
      return $scope.selectedTab = tab;
    };
    return $scope.tabClass = function(tab) {
      if ($scope.selectedTab === tab) {
        return "active";
      } else {
        return "";
      }
    };
  });

  controllers.controller("DatasetListCtrl", function($scope, $http, $upload, $timeout, DataService) {
    $scope.selectedIndex = 0;
    $scope.currentPane = 'left';
    $scope.options = [
      {
        label: 'Upload File',
        inactive: false
      }, {
        label: 'Connect to Database',
        inactive: true
      }, {
        label: 'Connect to API',
        inactive: true
      }, {
        label: 'Search DIVE Datasets',
        inactive: true
      }
    ];
    $scope.select_option = function(index) {
      $scope.currentPane = 'left';
      if (!$scope.options[index].inactive) {
        return $scope.selectedIndex = index;
      }
    };
    $scope.select_dataset = function(index) {
      $scope.currentPane = 'right';
      return $scope.selectedIndex = index;
    };
    $scope.types = ["int", "float", "str"];
    $scope.datasets = DataService.getData();
    $scope.fileReaderSupported = (window.FileReader != null) && ((window.FileAPI == null) || FileAPI.html5 !== false);
    $scope.uploadRightAway = true;
    $scope.hasUploader = function(index) {
      return $scope.upload[index] != null;
    };
    $scope.abort = function(index) {
      $scope.upload[index].abort();
      return $scope.upload[index] = null;
    };
    $scope.selectedFiles = [];
    $scope.onFileSelect = function($files) {
      var $file, fileReader, i, _results;
      $scope.progress = [];
      if ($scope.upload && $scope.upload.length > 0) {
        i = 0;
        while (i < $scope.upload.length) {
          if ($scope.upload[i] != null) {
            $scope.upload[i].abort();
          }
          i++;
        }
      }
      $scope.upload = [];
      $scope.uploadResult = [];
      $scope.selectedFiles = $files;
      $scope.uploadData = [];
      i = 0;
      _results = [];
      while (i < $files.length) {
        $file = $files[i];
        if ($scope.fileReaderSupported) {
          fileReader = new FileReader();
          fileReader.readAsDataURL($files[i]);
          fileReader.onload = function(e) {
            $scope.uploadData[i] = e.target.result;
            if ($scope.uploadRightAway) {
              return $scope.start(i);
            }
          };
        }
        $scope.progress[i] = -1;
        _results.push(i++);
      }
      return _results;
    };
    return $scope.start = function(index) {
      console.log('Start', index);
      console.log($scope.uploadData[index], $scope.selectedFiles);
      $scope.errorMsg = null;
      $scope.upload[index] = $upload.upload({
        url: '/api/upload',
        method: 'POST',
        data: {
          data: $scope.uploadData[index]
        },
        file: $scope.selectedFiles[index],
        fileFormDataName: 'file'
      });
      return $scope.upload[index].then((function(response) {
        return $timeout(function() {
          return $scope.uploadResult.push(response.data);
        });
      }), (function(response) {
        if (response.status > 0) {
          return $scope.errorMsg = response.status + ": " + response.data;
        }
      }), function(evt) {
        return $scope.progress[index] = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
      });
    };
  });

  controllers.controller("OntologyEditorCtrl", function($scope, $http, DataService, OverlapService) {
    var relnData;
    $scope.datasets = DataService.getData();
    relnData = OverlapService.getData();
    $scope.overlaps = relnData.overlaps;
    $scope.hierarchies = relnData.hierarchies;
  });

  controllers.controller("AssembleCtrl", function($scope, $http) {});

  controllers.controller("CreateVizCtrl", function($scope, $http, DataService, OverlapService, VizDataService, VizFromOntologyService) {
    var columnPair, columnPairList, d, dataset, datasetPair, datasetPairList, datasets, edge, edges, hierarchy, i, initNetwork, node, nodes, relnData, type;
    datasets = DataService.getData();
    $scope.datasets = datasets;
    relnData = OverlapService.getData();
    nodes = [];
    edges = [];
    i = 0;
    while (i < datasets.length) {
      dataset = datasets[i];
      node = {
        model: dataset.dataset_id,
        attrs: dataset.column_attrs,
        unique_cols: dataset.unique_cols
      };
      nodes.push(node);
      i++;
    }
    for (datasetPair in relnData.hierarchies) {
      hierarchy = relnData.hierarchies[datasetPair];
      datasetPairList = datasetPair.split("\t");
      for (columnPair in hierarchy) {
        type = hierarchy[columnPair];
        columnPairList = columnPair.split("\t");
        d = relnData.overlaps[datasetPair][columnPair];
        if (d > 0.5) {
          edge = {
            source: [parseInt(datasetPairList[0]), parseInt(columnPairList[1])],
            target: [parseInt(datasetPairList[1]), parseInt(columnPairList[1])],
            type: type
          };
          edges.push(edge);
        }
      }
    }
    initNetwork = {
      nodes: nodes,
      edges: edges
    };
    $scope.initNetwork = initNetwork;
    $scope.vizType = "treemap";
    $scope.selected_vizType_index = 1;
    $scope.select_vizType = function(index) {
      $scope.vizType = $scope.vizTypes[index].name;
      $scope.selected_vizType_index = index;
      $scope.vizSpecs = $scope.allVizSpecs[$scope.selected_vizType];
    };
    $scope.selected_vizSpec_index = 0;
    $scope.select_vizSpec = function(index) {
      $scope.selected_vizSpec_index = index;
    };
    $scope.getDatasetTitle = function(dataset_id) {
      return datasets[dataset_id].title;
    };
    $scope.getColumnName = function(dataset_id, column_id) {
      return datasets[dataset_id].column_attrs[column_id].name;
    };
    $scope.vizFromOntology = function() {
      VizFromOntologyService.promise($scope.initNetwork, function(data) {
        var visualization, visualizations, vizTypes;
        visualizations = data.visualizations;
        vizTypes = [];
        for (visualization in visualizations) {
          vizTypes.push({
            name: visualization,
            count: visualizations[visualization].length
          });
        }
        $scope.vizTypes = vizTypes;
        $scope.vizSpecs = visualizations[$scope.vizType];
        $scope.allVizSpecs = visualizations;
      });
    };
    $scope.vizFromOntology();
    $scope.setVizData = function(vizSpec) {
      $scope.vizSpec = vizSpec;
      VizDataService.promise(vizSpec, function(result) {
        $scope.vizData = result.result;
      });
    };
  });

}).call(this);
