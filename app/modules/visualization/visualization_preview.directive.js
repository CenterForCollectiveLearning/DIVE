var $, d3, d3plus, topojson;

$ = require('jquery');

d3 = require('d3');

d3plus = require('d3plus');

topojson = require('topojson');

require('metrics-graphics')

angular.module('diveApp.visualization').directive("visualizationPreview", [
  "$window", "$timeout", function($window, $timeout) {
    return {
      restrict: "EA",
      scope: {
        vizType: "=",
        vizSpec: "=",
        vizData: "=",
        conditional: "=",
        label: "@",
        onClick: "&"
      },
      link: function(scope, ele, attrs) {
        var renderTimeout;
        renderTimeout = void 0;
        $window.onresize = function() {
          return scope.$apply();
        };
        scope.$watch((function() {
          return angular.element($window)[0].innerWidth;
        }), function() {
          return scope.render(scope.vizType, scope.vizSpec, scope.vizData, scope.conditionalData);
        });
        scope.$watchCollection("[vizType,vizSpec,vizData,conditional]", (function(newData) {
          return scope.render(newData[0], newData[1], newData[2], newData[3]);
        }), true);
        return scope.render = function(vizType, vizSpec, vizData, conditional) {
          if (!(vizData && vizSpec && vizType && conditional)) {
            return;
          }
          if (renderTimeout) {
            clearTimeout(renderTimeout);
          }
          return renderTimeout = $timeout(function() {
            var agg, condition, d3PlusTypeMapping, dropdown, getTitle, viz, x, y;
            getTitle = function(vizType, vizSpec, conditional) {
              var title;
              title = '';
              if (vizType === 'treemap' || vizType === 'piechart') {
                title += 'Group all ' + vizSpec.aggregate.title + ' by ' + vizSpec.groupBy.title.toString();
                if (vizSpec.condition.title) {
                  title += ' given a ' + vizSpec.condition.title.toString();
                }
              } else if (vizType === 'scatterplot' || vizType === 'barchart' || vizType === 'linechart') {
                return;
              }
              return title;
            };
            if (condition) {
              condition = vizSpec.condition.title.toString();
              if (conditionalData.length < 300) {
                dropdown = d3plus.form().container("div#viz-container").data(conditionalData).title("Select Options").id(condition).text(condition).type("drop").title(condition).draw();
              }
            }
            d3PlusTypeMapping = {
              treemap: 'tree_map',
              piechart: 'pie',
              barchart: 'bar',
              scatterplot: 'scatter',
              linechart: 'line',
              geomap: 'geo_map'
            };
            console.log("VIZ DATA", vizData);
            console.log("VIZ SPEC", vizSpec);
            console.log("VIZ TYPE", vizType);
            viz = d3plus.viz().title(getTitle(vizType, vizSpec)).type(d3PlusTypeMapping[vizType]).container("div#viz-container").width($("div#viz-container").width() - 40).margin("20px").height(600).data(vizData).font({
              family: "Titillium Web"
            });
            if (vizType === "treemap" || vizType === "piechart") {
              return viz.id(vizSpec.groupBy.title.toString()).size("count").draw();
            } else if (vizType === "scatterplot" || vizType === "barchart" || vizType === "linechart") {
              x = vizSpec.x.title;
              agg = vizSpec.aggregation;
              if (agg) {
                console.log(x);
                viz.x(x).y("count");
                if (vizSpec.x.type === "datetime") {
                  viz.x(function(d) {
                    return (new Date(d[x])).valueOf();
                  }).format({
                    number: function(d, k) {
                      if (typeof k === "function") {
                        return d3.time.format("%m/%Y")(new Date(d));
                      } else {
                        return d;
                      }
                    }
                  }).y("count");
                } else {
                  viz.x(x).y("count");
                }
                if (vizType === "linechart") {
                  return viz.id("id").draw();
                } else {
                  return viz.id(x).size(10).draw();
                }
              } else {
                y = vizSpec.y.title;
                return viz.title(getTitle(vizType, vizSpec)).x(x).y(y).id(x).draw();
              }
            } else if (vizType === "geomap") {
              console.log("Rendering geomap with id:", vizSpec.groupBy.title.toString());
              return viz.title(getTitle(vizType, vizSpec)).coords("/assets/misc/countries.json").id("id").text("label").color("count").size("count").draw();
            }
          }, 200);
        };
      }
    };
  }
]);

// ---
// generated by coffee-script 1.9.0